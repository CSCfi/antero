modeljson_kielet <- fromJSON("kielet_json.json")
# convert back to JSON to see if the file stays the same
modeljsonASjson <- toJSON(modeljson)
modeljson_kieletASjson <- toJSON(modeljson_kielet)
# Structure of the function below:
# 1) read excel master from file in data frame format
# 2) build a nested list, corresponding to json-cultures format
# 3) fill the nested list by translations from the excel master
# 4) convert the nested list into json and return it
# function inputs: location (with name and file ending) of the master
# function outputs: json
makejson <- function(masterlocation){
samplemaster <- read_excel(masterlocation,col_names = TRUE) #%>% filter(keep==1)
samplemaster
samplemasterOrig <- samplemaster
# keep-filter by jhe 28.8.2018
# 1) Find all languages and types in the master
languages <- unique(samplemaster$culture)
lans <- length(languages)
# make node stucture, begin from top node
testjson <- list(cultures = "placeholder")
testjson$cultures <- data.frame(name= languages, translations = rep("placeholder", lans), stringsAsFactors = FALSE)
testjson$cultures$translations <- data.frame(model = c(rep("placeholder", lans)),
stringsAsFactors = FALSE)
testjson$cultures$translations$model <- data.frame(name = rep("Model", lans),
translatedCaption = character(lans),
translatedDescription = character(lans),
tables = character(lans),
stringsAsFactors = FALSE)
# MODIFY so that table name is given or read
#tableelement <- data.frame(name = "Sarakeleveys",
tableelement <- data.frame(name = "Muuttujat",
translatedCaption = "Var",
#                            translatedCaption = revalue(samplemaster$culture, c("fi-FI"="Muuttujat","sv-SE"="Variabler","en-US"="Variables")) ,
#                             translatedCaption =if(samplemaster$culture == "fi-FI") {"Muuttujat"} else if (samplemaster$culture == "sv-SE") {"Variabler"} else {"Variables"},
translatedDescription = "",
columns = "placeholder",
measures = "placeholder",
stringsAsFactors = FALSE)
# make stucture for table
tablelist <- list(tableelement)
i <- 1
while(i + 1 < lans) {
tablelist[[i]] <- tableelement
i <- i + 1
}
testjson$cultures$translations$model$tables <- tablelist
# make placeholder structure for actual translations
# may be modified later to fill immediately
i <- 1
while(i - 1 < lans) {
testjson$cultures$translations$model$tables[[i]]$columns <- list(data.frame(test = "placeholder"))
testjson$cultures$translations$model$tables[[i]]$columns <- list(data.frame(name = "All_original_names_here",
translatedCaption = ".",
translatedDescription = "Description_here",
translatedDisplayFolder = "ø",
stringsAsFactors = FALSE))
testjson$cultures$translations$model$tables[[i]]$measures <- list(data.frame(name = "All_original_measures_here",
translatedCaption = "All_measure_translations",
translatedDisplayFolder = "Measures_folders_here",
stringsAsFactors = FALSE))
i <- i + 1
}
#jhe: create trashbin for redundant fields within respective cultures
samplemaster$trashCaption <- "."
samplemaster$trashFolder <-"ø"
samplemaster$codeLang <- ""
# /jhe
# use the above structure to add the translations
# filter samplemaster to fill one language in one loop
i = 1
while(i - 1 < lans)
{
#jhe: dispose trashes into bin
samplemaster$translatedCaption <- ifelse(samplemasterOrig$culture == languages[i],samplemasterOrig$translatedCaption,samplemaster$trashCaption)
samplemaster$translatedDisplayFolder <- ifelse(samplemasterOrig$culture == languages[i],samplemasterOrig$translatedDisplayFolder,samplemaster$trashFolder)
samplemaster$isCurrentLang <- ifelse(samplemasterOrig$culture == languages[i],1,0)
samplemaster$isCode <- ifelse(samplemaster$type %in% c("code"),1,0)
samplemaster$codeLang <- samplemaster$isCurrentLang+samplemaster$isCode
# /jhe
# add columns
fillmaster <- samplemaster %>%
##      filter(type != "measure" & culture == languages[i]) %>%
filter(type == "column" | codeLang == 2) %>%
#      select(-c(type, culture, translatedDescription))
select(c(name,translatedCaption,translatedDisplayFolder))
testjson$cultures$translations$model$tables[[i]]$columns[[1]] <- fillmaster
# add measures
fillmaster <- samplemaster %>%
filter(type == "measure" & culture == languages[i]) %>%
###      filter(type == "measure") %>%
select(c(name,translatedCaption,translatedDisplayFolder))
testjson$cultures$translations$model$tables[[i]]$measures[[1]] <- fillmaster
i <- i + 1
}
# convert the testjson to json
testjsonasjson <- toJSON(testjson)
# save to .json
filetime <- format(Sys.time(), "%d-%m-%Y")
filename <- paste("vipunen_cultures_DEMO_",filetime, ".json", sep = "")
#  filename <- paste("vipunen_sarakeleveys_cultures_",filetime, ".json", sep = "")
#  write(testjsonasjson, filename)
#jhe 31.8.2018: vaihdoin kirjoitustavan writeLinesiin, se osaa UTF8:n
writeLines(testjsonasjson, filename, useBytes=T)
#return(testjsonasjson)
return(samplemaster)
}
# example function call
#vipunen_cultures <- makejson("malli_lista_json_harjoitusta_varten_4.xlsx")
#vipunen_cultures <- makejson("D:/Vipunen/ReportCreator2016/pankalai/Käännöstyökalu/vipunen_cultures_DEMO.xlsx")
#    vipunen_cultures <- makejson("virta_otp_55_suppea_cultures_demo.xlsx")
#vipunen_cultures <- makejson("vipunen_sarakeleveys_cultures.xlsx")
samplemaster <- read_excel("D:/Vipunen/ReportCreator2016/pankalai/Käännöstyökalu/vipunen_cultures_DEMO.xlsx",col_names = TRUE) #%>% filter(keep==1)
samplemaster <- samplemaster[samplemaster$type == 'column',]
samplemaster
library(dplyr, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
library(magrittr, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
library(readxl, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
library(readr, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
library(jsonlite, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
# List To Cultures Json File Tool 1.0
# Created by Anni Pyysing
# Modified by Juha Helminen (jhe)
## ATTENTION: File is saved ANSI encoded, needs to be converted to UTF-8 before importing to MS tabular project
## /jhe 26.8.2018
# input: Excel master with translations
# output: Json cultures file with translations
#install.packages("readr")
library(readr, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
library(jsonlite, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
#install.packages("readxl")
library(readxl, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
#install.packages("magrittr")
library(magrittr, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
#install.packages("dplyr")
library(dplyr, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
#library(utf8)
# read demo.json into R to explore desired format
modeljson <- fromJSON("malli_json_harjoitusta_varten.json")
modeljson_kielet <- fromJSON("kielet_json.json")
# convert back to JSON to see if the file stays the same
modeljsonASjson <- toJSON(modeljson)
modeljson_kieletASjson <- toJSON(modeljson_kielet)
# Structure of the function below:
# 1) read excel master from file in data frame format
# 2) build a nested list, corresponding to json-cultures format
# 3) fill the nested list by translations from the excel master
# 4) convert the nested list into json and return it
# function inputs: location (with name and file ending) of the master
# function outputs: json
makejson <- function(masterlocation){
samplemaster <- read_excel(masterlocation,col_names = TRUE) #%>% filter(keep==1)
samplemasterOrig <- samplemaster
# keep-filter by jhe 28.8.2018
# 1) Find all languages and types in the master
languages <- unique(samplemaster$culture)
lans <- length(languages)
# make node stucture, begin from top node
testjson <- list(cultures = "placeholder")
testjson$cultures <- data.frame(name= languages, translations = rep("placeholder", lans), stringsAsFactors = FALSE)
testjson$cultures$translations <- data.frame(model = c(rep("placeholder", lans)),
stringsAsFactors = FALSE)
testjson$cultures$translations$model <- data.frame(name = rep("Model", lans),
translatedCaption = character(lans),
translatedDescription = character(lans),
tables = character(lans),
stringsAsFactors = FALSE)
# MODIFY so that table name is given or read
#tableelement <- data.frame(name = "Sarakeleveys",
tableelement <- data.frame(name = "Muuttujat",
translatedCaption = "Var",
#                            translatedCaption = revalue(samplemaster$culture, c("fi-FI"="Muuttujat","sv-SE"="Variabler","en-US"="Variables")) ,
#                             translatedCaption =if(samplemaster$culture == "fi-FI") {"Muuttujat"} else if (samplemaster$culture == "sv-SE") {"Variabler"} else {"Variables"},
translatedDescription = "",
columns = "placeholder",
measures = "placeholder",
stringsAsFactors = FALSE)
# make stucture for table
tablelist <- list(tableelement)
i <- 1
while(i + 1 < lans) {
tablelist[[i]] <- tableelement
i <- i + 1
}
testjson$cultures$translations$model$tables <- tablelist
# make placeholder structure for actual translations
# may be modified later to fill immediately
i <- 1
while(i - 1 < lans) {
testjson$cultures$translations$model$tables[[i]]$columns <- list(data.frame(test = "placeholder"))
testjson$cultures$translations$model$tables[[i]]$columns <- list(data.frame(name = "All_original_names_here",
translatedCaption = ".",
translatedDescription = "Description_here",
translatedDisplayFolder = "ø",
stringsAsFactors = FALSE))
testjson$cultures$translations$model$tables[[i]]$measures <- list(data.frame(name = "All_original_measures_here",
translatedCaption = "All_measure_translations",
translatedDisplayFolder = "Measures_folders_here",
stringsAsFactors = FALSE))
i <- i + 1
}
#jhe: create trashbin for redundant fields within respective cultures
samplemaster$trashCaption <- "."
samplemaster$trashFolder <-"ø"
samplemaster$codeLang <- ""
# /jhe
# use the above structure to add the translations
# filter samplemaster to fill one language in one loop
i = 1
while(i - 1 < lans)
{
#jhe: dispose trashes into bin
samplemaster$translatedCaption <- ifelse(samplemasterOrig$culture == languages[i],samplemasterOrig$translatedCaption,samplemaster$trashCaption)
samplemaster$translatedDisplayFolder <- ifelse(samplemasterOrig$culture == languages[i],samplemasterOrig$translatedDisplayFolder,samplemaster$trashFolder)
samplemaster$isCurrentLang <- ifelse(samplemasterOrig$culture == languages[i],1,0)
samplemaster$isCode <- ifelse(samplemaster$type %in% c("code"),1,0)
samplemaster$codeLang <- samplemaster$isCurrentLang+samplemaster$isCode
# /jhe
# add columns
fillmaster <- samplemaster %>%
##      filter(type != "measure" & culture == languages[i]) %>%
filter(type == "column" | codeLang == 2) %>%
#      select(-c(type, culture, translatedDescription))
select(c(name,translatedCaption,translatedDisplayFolder))
testjson$cultures$translations$model$tables[[i]]$columns[[1]] <- fillmaster
# add measures
fillmaster <- samplemaster %>%
filter(type == "measure" & culture == languages[i]) %>%
###      filter(type == "measure") %>%
select(c(name,translatedCaption,translatedDisplayFolder))
testjson$cultures$translations$model$tables[[i]]$measures[[1]] <- fillmaster
i <- i + 1
}
# convert the testjson to json
testjsonasjson <- toJSON(testjson)
# save to .json
filetime <- format(Sys.time(), "%d-%m-%Y")
filename <- paste("vipunen_cultures_DEMO_",filetime, ".json", sep = "")
#  filename <- paste("vipunen_sarakeleveys_cultures_",filetime, ".json", sep = "")
#  write(testjsonasjson, filename)
#jhe 31.8.2018: vaihdoin kirjoitustavan writeLinesiin, se osaa UTF8:n
writeLines(testjsonasjson, filename, useBytes=T)
#return(testjsonasjson)
return(samplemaster)
}
# example function call
#vipunen_cultures <- makejson("malli_lista_json_harjoitusta_varten_4.xlsx")
vipunen_cultures <- makejson("D:/Vipunen/ReportCreator2016/pankalai/Käännöstyökalu/vipunen_cultures_DEMO.xlsx")
#    vipunen_cultures <- makejson("virta_otp_55_suppea_cultures_demo.xlsx")
#vipunen_cultures <- makejson("vipunen_sarakeleveys_cultures.xlsx")
# samplemaster <- read_excel("D:/Vipunen/ReportCreator2016/pankalai/Käännöstyökalu/vipunen_cultures_DEMO.xlsx",col_names = TRUE) #%>% filter(keep==1)
# samplemaster <- samplemaster[samplemaster$type == 'column',]
# samplemaster
testjson <- list(cultures = "placeholder")
testjson
testjson$cultures <- data.frame(name= languages, translations = rep("placeholder", lans), stringsAsFactors = FALSE)
languages <- unique(samplemaster$culture)
lans <- length(languages)
# make node stucture, begin from top node
testjson <- list(cultures = "placeholder")
testjson$cultures <- data.frame(name= languages, translations = rep("placeholder", lans), stringsAsFactors = FALSE)
testjson
testjson$cultures$translations <- data.frame(model = c(rep("placeholder", lans)),
stringsAsFactors = FALSE)
testjson$cultures$translations$model <- data.frame(name = rep("Model", lans),
translatedCaption = character(lans),
translatedDescription = character(lans),
tables = character(lans),
stringsAsFactors = FALSE)
testjson
tableelement <- data.frame(name = "Muuttujat",
translatedCaption = "Var",
#                            translatedCaption = revalue(samplemaster$culture, c("fi-FI"="Muuttujat","sv-SE"="Variabler","en-US"="Variables")) ,
#                             translatedCaption =if(samplemaster$culture == "fi-FI") {"Muuttujat"} else if (samplemaster$culture == "sv-SE") {"Variabler"} else {"Variables"},
translatedDescription = "",
columns = "placeholder",
measures = "placeholder",
stringsAsFactors = FALSE)
tableelement
tablelist <- list(tableelement)
tablelist
while(i + 1 < lans) {
tablelist[[i]] <- tableelement
i <- i + 1
}
i <- 1
while(i + 1 < lans) {
tablelist[[i]] <- tableelement
i <- i + 1
}
tablelist
testjson$cultures$translations$model$tables <- tablelist
# make placeholder structure for actual translations
# may be modified later to fill immediately
i <- 1
while(i - 1 < lans) {
testjson$cultures$translations$model$tables[[i]]$columns <- list(data.frame(test = "placeholder"))
testjson$cultures$translations$model$tables[[i]]$columns <- list(data.frame(name = "All_original_names_here",
translatedCaption = ".",
translatedDescription = "Description_here",
translatedDisplayFolder = "ø",
stringsAsFactors = FALSE))
testjson$cultures$translations$model$tables[[i]]$measures <- list(data.frame(name = "All_original_measures_here",
translatedCaption = "All_measure_translations",
translatedDisplayFolder = "Measures_folders_here",
stringsAsFactors = FALSE))
i <- i + 1
}
#jhe: create trashbin for redundant fields within respective cultures
samplemaster$trashCaption <- "."
samplemaster$trashFolder <-"ø"
samplemaster$codeLang <- ""
# /jhe
# use the above structure to add the translations
# filter samplemaster to fill one language in one loop
i = 1
while(i - 1 < lans)
{
#jhe: dispose trashes into bin
samplemaster$translatedCaption <- ifelse(samplemasterOrig$culture == languages[i],samplemasterOrig$translatedCaption,samplemaster$trashCaption)
samplemaster$translatedDisplayFolder <- ifelse(samplemasterOrig$culture == languages[i],samplemasterOrig$translatedDisplayFolder,samplemaster$trashFolder)
samplemaster$isCurrentLang <- ifelse(samplemasterOrig$culture == languages[i],1,0)
samplemaster$isCode <- ifelse(samplemaster$type %in% c("code"),1,0)
samplemaster$codeLang <- samplemaster$isCurrentLang+samplemaster$isCode
# /jhe
# add columns
fillmaster <- samplemaster %>%
##      filter(type != "measure" & culture == languages[i]) %>%
filter(type == "column" | codeLang == 2) %>%
#      select(-c(type, culture, translatedDescription))
select(c(name,translatedCaption,translatedDisplayFolder))
testjson$cultures$translations$model$tables[[i]]$columns[[1]] <- fillmaster
# add measures
fillmaster <- samplemaster %>%
filter(type == "measure" & culture == languages[i]) %>%
###      filter(type == "measure") %>%
select(c(name,translatedCaption,translatedDisplayFolder))
testjson$cultures$translations$model$tables[[i]]$measures[[1]] <- fillmaster
i <- i + 1
}
samplemasterOrig <- samplemaster
testjson$cultures$translations$model$tables <- tablelist
# make placeholder structure for actual translations
# may be modified later to fill immediately
i <- 1
while(i - 1 < lans) {
testjson$cultures$translations$model$tables[[i]]$columns <- list(data.frame(test = "placeholder"))
testjson$cultures$translations$model$tables[[i]]$columns <- list(data.frame(name = "All_original_names_here",
translatedCaption = ".",
translatedDescription = "Description_here",
translatedDisplayFolder = "ø",
stringsAsFactors = FALSE))
testjson$cultures$translations$model$tables[[i]]$measures <- list(data.frame(name = "All_original_measures_here",
translatedCaption = "All_measure_translations",
translatedDisplayFolder = "Measures_folders_here",
stringsAsFactors = FALSE))
i <- i + 1
}
#jhe: create trashbin for redundant fields within respective cultures
samplemaster$trashCaption <- "."
samplemaster$trashFolder <-"ø"
samplemaster$codeLang <- ""
# /jhe
# use the above structure to add the translations
# filter samplemaster to fill one language in one loop
i = 1
while(i - 1 < lans)
{
#jhe: dispose trashes into bin
samplemaster$translatedCaption <- ifelse(samplemasterOrig$culture == languages[i],samplemasterOrig$translatedCaption,samplemaster$trashCaption)
samplemaster$translatedDisplayFolder <- ifelse(samplemasterOrig$culture == languages[i],samplemasterOrig$translatedDisplayFolder,samplemaster$trashFolder)
samplemaster$isCurrentLang <- ifelse(samplemasterOrig$culture == languages[i],1,0)
samplemaster$isCode <- ifelse(samplemaster$type %in% c("code"),1,0)
samplemaster$codeLang <- samplemaster$isCurrentLang+samplemaster$isCode
# /jhe
# add columns
fillmaster <- samplemaster %>%
##      filter(type != "measure" & culture == languages[i]) %>%
filter(type == "column" | codeLang == 2) %>%
#      select(-c(type, culture, translatedDescription))
select(c(name,translatedCaption,translatedDisplayFolder))
testjson$cultures$translations$model$tables[[i]]$columns[[1]] <- fillmaster
# add measures
fillmaster <- samplemaster %>%
filter(type == "measure" & culture == languages[i]) %>%
###      filter(type == "measure") %>%
select(c(name,translatedCaption,translatedDisplayFolder))
testjson$cultures$translations$model$tables[[i]]$measures[[1]] <- fillmaster
i <- i + 1
}
testjson
testjsonasjson <- toJSON(testjson)
testjsonasjson
library(RODBC)
install.packages("RODBC")
library(RODBC)
install.packages("RODBC")
library(RODBC, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
library(RODBC, lib.loc="C:/Users/pankalai.000/AppData/Local/Temp/RtmpIdkUo1/downloaded_packages/")
library(RODBC_1.3-17, lib.loc="C:/Users/pankalai.000/AppData/Local/Temp/RtmpIdkUo1/downloaded_packages/")
?install.packages
install.packages("RODBC", destdir="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
library(RODBC, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
library(RODBC, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
install.packages("RODBC", destdir="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
library(RODBC, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
install.packages("RODBC", destdir="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
install.packages("RODBC", destdir="C:/Users/pankalai.000/Documents/R/win-library/4.0/")
library(RODBC, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/4.0/")
writeLines(
'PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"',
con = file("~/.Renviron", open = "a")
)
install.packages("RODBC", destdir="C:/Users/pankalai.000/Documents/R/win-library/4.0/")
install.packages("installr")
install.Rtools()
installr::install.Rtools()
install.packages("RODBC", destdir="C:/Users/pankalai.000/Documents/R/win-library/4.0/")
library(RODBC, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/4.0/")
conn <- odbcConnect(dsn = "dwitvipusql16.csc.fi")
installr::install.Rtools()
install.packages("pkgbuild", destdir="C:/Users/pankalai.000/Documents/R/win-library/4.0/")
installr::install.Rtools()
install.packages("RODBC", destdir="C:/Users/pankalai.000/Documents/R/win-library/4.0/")
installr::install.Rtools()
install.packages("RODBC", destdir="C:/Users/pankalai.000/Documents/R/win-library/4.0/")
R --version
R.Version()
conn <- odbcConnect(dsn = "dwitvipusql16.csc.fi")
library(RODBC, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/4.0/")
#yhteys tietokantaan
conn <- odbcConnect(dsn = "dwitvipusql16.csc.fi")
?odbcConnect
library(RODBC, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/4.0/")
#yhteys tietokantaan
conn <- odbcConnect(dsn = "dwitvipusql16")
conn <- odbcDriverConnect("Driver={SQL Server};Server=dwitvipusql16;Trusted_Connection=Yes")
sqlQuery(conn,paste("
SELECT *
FROM [ANTERO].[dw].[d_amk]
"))
?sqlColumns
sqlColumns(channel, "[ANTERO].[dw].[d_amk]")
sqlColumns(conn, "[ANTERO].[dw].[d_amk]")
conn <- odbcDriverConnect("Driver={SQL Server};Server=dwitvipusql16;Database=ANTERO;Trusted_Connection=Yes")
sqlColumns(conn, schema="dw",sqltable = "d_amk")
sqlColumns(conn, schema="dw",sqtable = "d_amk")
sqlColumns(conn, schema="dw",sqtable = "d_amk")$COLUMN_NAME
sqlColumns(conn, schema="dw",sqtable = "v_amos_tutkinnot_ja_tutkinnonosat")$COLUMN_NAME
usethis::edit_r_environ()
install.packages("usethis")
usethis::edit_r_environ()
install.packages("RODBC", destdir="C:/Users/pankalai.000/Documents/R/win-library/4.0/")
install.packages("RODBC", destdir = "C:/Users/pankalai.000/Documents/R/win-library/4.0/")
usethis::edit_r_environ()
install.packages("RODBC", destdir="C:/Users/pankalai.000/Documents/R/win-library/4.0/")
library(RODBC, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/4.0/")
conn <- odbcDriverConnect("Driver={SQL Server};Server=dwitvipusql16;Database=ANTERO;Trusted_Connection=Yes")
#kysely
sqlQuery(conn,paste("
SELECT *
FROM [ANTERO].[dw].[d_amk]
"))
#sarakkeet
#sqlColumns(conn, schema="dw",sqtable = "d_amk")$COLUMN_NAME
sqlColumns(conn, schema="dw",sqtable = "v_amos_tutkinnot_ja_tutkinnonosat")$COLUMN_NAME
json_y <- json_x[[1]]['name']
#import jsonlite library to handle JSON
#?install.packages
#install.packages("jsonlite")
library(jsonlite, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/3.5/")
#get JSON from model.bim
filepath <- "D:/Vipunen/ReportCreator2016/pankalai/Käännöstyökalu/"
json_file <- "D:/Vipunen/ReportCreator2016/pankalai/Käännöstyökalu/model.bim"
json_data <- fromJSON(json_file)
#Parsitaan kasaan JSON:sta -taulun kentät-
json_i <- json_data$model
json_x <- json_i$tables$columns
json_y <- json_x[[1]]['name']
#Parsitaan kasaan JSON:sta -mittarit- ja niille -displayfolderit-
json_z <- json_i$tables$measures[[1]]
json_q <- json_z[,c(1,4)]
#Nimetään ulostuleva file
filetime <- format(Sys.time(), "%d-%m-%Y")
Outfile <- file.path(filepath, paste("to_translation",filetime, ".csv", sep = ""))
write.table(json_q,file=Outfile, sep="|", row.names = TRUE, col.names = TRUE)
write.table(json_y,file=Outfile, sep="|", row.names = TRUE, col.names = TRUE, append = TRUE)
#close(Outfile)
install.packages("jsonlite")
#import jsonlite library to handle JSON
#?install.packages
#install.packages("jsonlite")
library(jsonlite, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/4.0/")
#get JSON from model.bim
filepath <- "D:/Vipunen/ReportCreator2016/pankalai/Käännöstyökalu/"
json_file <- "D:/Vipunen/ReportCreator2016/pankalai/Käännöstyökalu/model.bim"
json_data <- fromJSON(json_file)
#Parsitaan kasaan JSON:sta -taulun kentät-
json_i <- json_data$model
json_x <- json_i$tables$columns
json_y <- json_x[[1]]['name']
#Parsitaan kasaan JSON:sta -mittarit- ja niille -displayfolderit-
json_z <- json_i$tables$measures[[1]]
json_q <- json_z[,c(1,4)]
#Nimetään ulostuleva file
filetime <- format(Sys.time(), "%d-%m-%Y")
Outfile <- file.path(filepath, paste("to_translation",filetime, ".csv", sep = ""))
write.table(json_q,file=Outfile, sep="|", row.names = TRUE, col.names = TRUE)
write.table(json_y,file=Outfile, sep="|", row.names = TRUE, col.names = TRUE, append = TRUE)
#close(Outfile)
?install.packages
library(jsonlite, lib.loc="C:/Users/pankalai.000/Documents/R/win-library/4.0/")
